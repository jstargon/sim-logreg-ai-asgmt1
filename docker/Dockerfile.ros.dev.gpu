ARG ROS_DISTRO=${ROS_DISTRO:-jazzy}
ARG FROM_IMAGE=osrf/ros:${ROS_DISTRO}-desktop-full
ARG UV_EXTRA=gpu
ARG WORKSPACE_DIR=/workspaces/eng-ai-agents
ARG WORKSPACE_USER=vscode

FROM ${FROM_IMAGE} AS builder

ENV NVIDIA_VISIBLE_DEVICES \
    ${NVIDIA_VISIBLE_DEVICES:-all}
ENV NVIDIA_DRIVER_CAPABILITIES \
    ${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}graphics
ENV QT_X11_NO_MITSHM=1
ENV EDITOR=nano
ENV XDG_RUNTIME_DIR=/tmp
ENV GZ_VERSION=garden

RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    curl \
    lsb-release \
    gnupg \
    git \
    wget \
    unzip \
    zip \
    ffmpeg \
    bash-completion \
    # gazebo \
    libglu1-mesa-dev \
    nano \
    python3-pip \
    python3-venv \
    python3-dev \
    python3-numpy \
    python3-setuptools \
    python3-pyqt5 \
    python3-opencv \
    python3-pydantic \
    python3-catkin-pkg \
    python3-argcomplete \
    # ros-jazzy-gazebo-ros \
    # ros-jazzy-gazebo-ros-pkgs \
    ros-jazzy-joint-state-publisher \
    ros-jazzy-robot-localization \
    ros-jazzy-plotjuggler-ros \
    ros-jazzy-robot-state-publisher \
    ros-jazzy-ros2bag \
    ros-jazzy-rosbag2-storage-default-plugins \
    ros-jazzy-rqt-tf-tree \
    ros-jazzy-rmw-fastrtps-cpp \
    ros-jazzy-rmw-cyclonedds-cpp \
    ros-jazzy-slam-toolbox \
    ros-jazzy-turtlebot3 \
    ros-jazzy-turtlebot3-msgs \
    ros-jazzy-twist-mux \
    ros-jazzy-usb-cam \
    ros-jazzy-xacro \
    ros-jazzy-tf-transformations \
    ros-jazzy-foxglove-bridge \
    ruby-dev \
    # rviz \
    tmux \
    xorg-dev \
    # Additional development libraries \
    libboost-python-dev \
    libboost-thread-dev \
    # libatlas-base-dev \
    libavcodec-dev \
    libavformat-dev \
    libavutil-dev \
    libcanberra-gtk3-module \
    libeigen3-dev \
    libglew-dev \
    libgl1 \
    libglx-mesa0 \
    libglib2.0-0 \
    libgtk2.0-dev \
    libgtk-3-dev \
    libjpeg-dev \
    liblapack-dev \
    liblapacke-dev \
    libopenblas-dev \
    libopencv-dev \
    libpng-dev \
    libpostproc-dev \
    libpq-dev \
    libsm6 \
    libswscale-dev \
    libtbb-dev \
    libtesseract-dev \
    libtiff-dev \
    libtiff5-dev \
    libv4l-dev \
    libx11-dev \
    libxext6 \
    libxine2-dev \
    libxrender-dev \
    libxvidcore-dev \
    libx264-dev \
    libgtkglext1 \
    libgtkglext1-dev \
    libvtk9-dev \
    libdc1394-dev \
    libgstreamer-plugins-base1.0-dev \
    libgstreamer1.0-dev \
    libopenexr-dev \
    openexr \
    pkg-config \
    qv4l2 \
    v4l-utils \
    zlib1g-dev \
    locales \
    jstest-gtk \
    && locale-gen en_US.UTF-8 \
    && LC_ALL=en_US.UTF-8 \
    && rm -rf /var/lib/apt/lists/*

# libraries for opengl in the container
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update \
 && apt-get install -y -qq --no-install-recommends \
  libglvnd0 \
  libgl1 \
  libglx0 \
  libegl1 \
  libxext6 \
  libx11-6 \
  && apt-get autoremove -y \
  && apt-get clean -y \
  && rm -rf /var/lib/apt/lists/*
ENV DEBIAN_FRONTEND=dialog

# # Install Gazebo garden
# RUN sh -c 'echo "deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main" > /etc/apt/sources.list.d/gazebo-stable.list'
# RUN wget http://packages.osrfoundation.org/gazebo.key -O - | sudo apt-key add -
# RUN apt-get update && apt-get install -y \
#     libsdformat13-dev  \
#     libsdformat13
# RUN wget https://packages.osrfoundation.org/gazebo.gpg -O /usr/share/keyrings/pkgs-osrf-archive-keyring.gpg
# RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/pkgs-osrf-archive-keyring.gpg] http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/gazebo-stable.list > /dev/null
# RUN apt-get update && apt-get install -y gz-garden
# RUN apt-get update && apt-get install -y python3-sdformat13

RUN apt-get autoremove -y \
    && apt-get clean -y \
    && rm -rf /var/lib/apt/lists/*

RUN wget https://github.com/openrr/urdf-viz/releases/download/v0.38.2/urdf-viz-x86_64-unknown-linux-gnu.tar.gz && \
    tar -xvzf urdf-viz-x86_64-unknown-linux-gnu.tar.gz -C /usr/local/bin/ && \
    chmod +x /usr/local/bin/urdf-viz && \
    rm -f urdf-viz-x86_64-unknown-linux-gnu.tar.gz

RUN gem install tmuxinator && \
    wget https://raw.githubusercontent.com/tmuxinator/tmuxinator/master/completion/tmuxinator.bash -O /etc/bash_completion.d/tmuxinator.bash

# specify vscode as the user name in the docker
# USERNAME is already defined above using WORKSPACE_USER
ARG USER_UID=1001
ARG USER_GID=1001

# Create a non-root user
RUN groupadd --gid $USER_GID vscode \
  && useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m vscode \
  # [Optional] Add sudo support for the non-root user - this is ok for development dockers only
  && apt-get update \
  && apt-get install -y sudo \
  && echo vscode ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/vscode \
  && chmod 0440 /etc/sudoers.d/vscode \
  # Cleanup
  && rm -rf /var/lib/apt/lists/* \
  # Set up git completion.
  && echo "source /usr/share/bash-completion/completions/git" >> /home/vscode/.bashrc

# Add the vscode user to the input group in the container so that it has access to input devices such as joysticks
RUN groupadd -g 107 input && usermod -aG input vscode

USER vscode

RUN echo "export DISABLE_AUTO_TITLE=true" >> ~/.bashrc
RUN echo 'LC_NUMERIC="en_US.UTF-8"' >> ~/.bashrc
RUN echo "source /opt/ros/jazzy/setup.bash" >> ~/.bashrc

RUN echo 'alias rosdi="rosdep install --from-paths src --ignore-src --rosdistro=${ROS_DISTRO} -y"' >> ~/.bashrc
RUN echo 'alias cbuild="colcon build --symlink-install"' >> ~/.bashrc
RUN echo 'alias ssetup="source ./install/local_setup.bash"' >> ~/.bashrc
RUN echo 'alias cyclone="export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp"' >> ~/.bashrc
RUN echo 'alias fastdds="export RMW_IMPLEMENTATION=rmw_fastrtps_cpp"' >> ~/.bashrc
RUN echo 'export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp' >> ~/.bashrc

# RUN echo "autoload -U bashcompinit" >> ~/.bashrc
# RUN echo "bashcompinit" >> ~/.bashrc
RUN echo 'eval "$(register-python-argcomplete ros2)"' >> ~/.bashrc
RUN echo 'eval "$(register-python-argcomplete colcon)"' >> ~/.bashrc

# Setup colcon
RUN echo "source /usr/share/colcon_cd/function/colcon_cd.sh" >> ~/.bashrc
RUN echo "export _colcon_cd_root=/opt/ros/jazzy/" >> ~/.bashrc
RUN echo "source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash" >> ~/.bashrc

# Aliases to point to python3
RUN \
   echo 'alias python="python3"' >> ~/.bashrc && \
   echo 'alias pip="pip3"' >> ~/.bashrc

RUN ln -s ~/.Xauthority:ro ~/.Xauthority

# Install uv for modern Python package management (as root)
USER root
COPY --from=ghcr.io/astral-sh/uv:latest --chown=${USERNAME}: /uv /uvx /bin/

# Copy the constraint file - we respect the existing package versions
RUN mkdir -p /etc/pip
RUN pip list --format=freeze > /etc/pip/constraint.txt
# This is a workaround to avoid issues with fsspec version 2025.5.1 as it conflicts with HF datasets 3.6.0
RUN sed -i 's/^fsspec==2025\.5\.1$/fsspec==2025.3.0/' /etc/pip/constraint.txt

# Install Node.js (required for some Quarto extensions)
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs

# Quarto
RUN curl -LO https://quarto.org/download/latest/quarto-linux-amd64.deb && \
    dpkg -i quarto-linux-amd64.deb
#RUN quarto install tinytex

# Install 1Password CLI
RUN curl -sS https://downloads.1password.com/linux/keys/1password.asc | gpg --dearmor > /usr/share/keyrings/1password-archive-keyring.gpg \
    && echo "deb [signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/amd64 stable main" > /etc/apt/sources.list.d/1password.list \
    && apt update \
    && apt install -y 1password-cli

# Switch back to user
USER vscode

# Disable GPG signing for git commits
RUN git config --global commit.gpgsign false

# Set up auto-source of workspace for the user
WORKDIR ${WORKSPACE_DIR}
RUN echo "if [ -f ${WORKSPACE_DIR}/install/setup.bash ]; then source ${WORKSPACE_DIR}/install/setup.bash; fi" >> ~/.bashrc

# Copy project files
COPY pyproject.toml uv.lock ./
COPY Makefile ./

ENV PYTHONUNBUFFERED=True

RUN echo 'if [ -f /workspaces/eng-ai-agents/ros_ws/install/setup.bash ]; then \
    source /workspaces/eng-ai-agents/ros_ws/install/setup.bash; \
fi' >> /home/vscode/.bashrc
