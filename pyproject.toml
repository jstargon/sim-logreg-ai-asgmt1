[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "eng-ai-agents"
version = "1.0.0.dev0"
description = "Course development environment."
readme = "README.md"
license = { text = "Apache-2.0" }
authors = [
    { name = "Members of Technical Staff @ Aegean AI", email = "pantelis.monogioudis@aegean.ai" }
]
keywords = ["deep learning", "transformer", "pytorch"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Education", 
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11, <3.12.4"
dependencies = [
    "datasets>=3.6.0",
    "foxglove>=0.1.10",
]

[project.urls]
Homepage = "https://github.com/pantelis/eng-ai-agents"
Repository = "https://github.com/pantelis/eng-ai-agents"
Documentation = "https://github.com/pantelis/eng-ai-agents"
Issues = "https://github.com/pantelis/eng-ai-agents/issues"

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "pytest-xdist>=3.0.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "pre-commit>=4.0.0",
]

[project.scripts]
eng-ai-agents-cli = "eng-ai-agents.commands.cli:main"

[tool.uv]
dev-dependencies = [
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0", 
    "pytest-xdist>=3.0.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "pre-commit>=4.0.0",
]

[tool.hatch.build.targets.wheel]
packages = ["src/eng-ai-agents"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/pyproject.toml",
]

[tool.ruff]
target-version = "py310"
line-length = 119
extend-exclude = [
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
]

[tool.ruff.lint]
# Enable rules: pycodestyle errors (E), pycodestyle warnings (W), pyflakes (F), 
# isort (I), complexity (C), and other quality rules
select = ["E", "W", "F", "I", "C", "N", "UP", "B", "A", "S", "T20", "SIM", "ARG", "PTH", "PL", "RUF"]
ignore = [
    "C901",  # too complex
    "E501",  # line too long (handled by formatter)
    "E741",  # ambiguous variable name
    "F402",  # import redefined
    "F823",  # local variable referenced before assignment
    "PLR0913",  # too many arguments
    "PLR0912",  # too many branches
    "PLR0915",  # too many statements
    "S101",  # use of assert
    "S603",  # subprocess call without shell=True
    "T201",  # print statements
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401", "F403", "F811"]
"src/eng-ai-agents/file_utils.py" = ["F401"]
"src/eng-ai-agents/utils/dummy_*.py" = ["F401"]
"tests/*" = ["S101", "ARG", "PLR2004"]

[tool.ruff.lint.isort]
lines-after-imports = 2
known-first-party = ["eng-ai-agents"]
force-single-line = false
split-on-trailing-comma = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "diagrams.*",
    "optuna.*",
    "filterpy.*",
    "transformers.*",
    "datasets.*",
    "accelerate.*",
    "gi.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=eng-ai-agents",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
python_paths = ["src"]
doctest_optionflags = ["NUMBER", "NORMALIZE_WHITESPACE", "ELLIPSIS"]
doctest_glob = "**/*.md"
markers = [
    "flash_attn_test: marks tests related to flash attention (deselect with '-m \"not flash_attn_test\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src/eng-ai-agents"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2
